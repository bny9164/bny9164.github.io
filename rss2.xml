<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Developer &amp; Modeler</title>
    <link>https://bny9164.github.io/</link>
    
    <atom:link href="https://bny9164.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Fri, 15 Oct 2021 12:12:53 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>hexo 검색엔진 최적화</title>
      <link>https://bny9164.github.io/2020/11/18/2021-10-15-ko-SEO/</link>
      <guid>https://bny9164.github.io/2020/11/18/2021-10-15-ko-SEO/</guid>
      <pubDate>Wed, 18 Nov 2020 06:49:53 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/img/post/2021-10-15-ko/SEO.png&quot; alt=&quot;SEO&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;내 블로그가 다양한 검색사이트에거 검색이 되게 하려면??&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;블로그를 생성한 후에 자신의 블로그가 검</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/img/post/2021-10-15-ko/SEO.png" alt="SEO"></p><p><em>내 블로그가 다양한 검색사이트에거 검색이 되게 하려면??</em></p><br><p>블로그를 생성한 후에 자신의 블로그가 검색엔진에 노출되게 하려면 최적화 작업을 진행해줘야 합니다.</p><h5 id="검색엔진-최적화-SEO-에-필요한-플러그인-설치"><a href="#검색엔진-최적화-SEO-에-필요한-플러그인-설치" class="headerlink" title="검색엔진 최적화(SEO)에 필요한 플러그인 설치"></a>검색엔진 최적화(SEO)에 필요한 플러그인 설치</h5><ul><li>hexo-auto-canonical</li><li>hexo-generator-robotstxt</li><li>hexo-autonofollow</li><li>hexo-generator-feed</li><li>hexo-generator-seo-friendly-sitemap</li></ul><br><h4 id="1-hexo-auto-canonical"><a href="#1-hexo-auto-canonical" class="headerlink" title="1. hexo-auto-canonical"></a>1. <code>hexo-auto-canonical</code></h4><p><strong>대표 URL(표준 링크)을 자동으로 생성해주는 플러그인입니다.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-auto-canonical</span><br></pre></td></tr></table></figure><br><p>위와 같이 <code>git</code>을 통하여 모듈을 설치합니다.<br>설치 후 블로그의 경로(메인 디렉토리 기준)에서 <code>themes &gt; hueman &gt; layout &gt; common &gt; head.ejs</code> 파일 내에 <code>&lt;%- meta(page) %&gt;</code> 아래에 아래의 코드를 넣어줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//.ejs</span><br><span class="line">&lt;%- autoCanonical(config, page) %&gt;</span><br><span class="line"></span><br><span class="line">//.jade</span><br><span class="line">| !&#123; autoCanonical(config, page) &#125;</span><br></pre></td></tr></table></figure><p>삽입하게 되면 아래와 같은 코드가 됩니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- meta(page) %&gt;</span><br><span class="line">&lt;%- autoCanonical(config, page) %&gt;</span><br></pre></td></tr></table></figure><br><h6 id="2-hexo-generator-robotstxt"><a href="#2-hexo-generator-robotstxt" class="headerlink" title="2. hexo-generator-robotstxt"></a>2. <code>hexo-generator-robotstxt</code></h6><p><strong>자동으로 robot.txt 파일을 생성해주는 플러그인 입니다.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-robotstxt --save</span><br></pre></td></tr></table></figure><p>위와 같이 <code>git</code>을 통하여 모듈을 설치합니다.<br>설치 후 블로그 디렉토리의 <code>_config.yml(테마 _config.yml 아닙니다.)</code> 파일을 열어 아래와 같이 입력해줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">robotstxt:</span><br><span class="line">  useragent: &quot;*&quot;</span><br><span class="line">  allow:</span><br><span class="line">    - /</span><br><span class="line">  sitemap: https://username.github.io/sitemap.xml</span><br></pre></td></tr></table></figure><br><h6 id="3-hexo-autonofollow"><a href="#3-hexo-autonofollow" class="headerlink" title="3. hexo-autonofollow"></a>3. <code>hexo-autonofollow</code></h6><p><strong>외부 링크에 <code>rel=&quot;external nofollow&quot;</code>속성을 자동으로 추가해주는 기능을 하는 플러그인입니다.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-autonofollow --save</span><br></pre></td></tr></table></figure><p>위와 같이 <code>git</code>을 통하여 모듈을 설치합니다.<br>설치 후 블로그 디렉토리의 <code>_config.yml(테마 _config.yml 아닙니다.)</code> 파일을 열어 아래와 같이 입력해줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">    enable: true //플러그인 활성화 여부</span><br><span class="line">    exclude: //제외시킬 host</span><br><span class="line">    - guest1.com</span><br><span class="line">    - guest2.com</span><br></pre></td></tr></table></figure><br><h6 id="4-hexo-generator-feed"><a href="#4-hexo-generator-feed" class="headerlink" title="4. hexo-generator-feed"></a>4. <code>hexo-generator-feed</code></h6><p><strong>자동으로 <code>RSS feed</code>를 생성해주는 플러그인 입니다.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>위와 같이 <code>git</code>을 통하여 모듈을 설치합니다.<br>설치 후 블로그 디렉토리의 <code>_config.yml(테마 _config.yml 아닙니다.)</code> 파일을 열어 아래와 같이 입력해줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: rss2 //feed의 종류(atom/rss2) *네이버는 atom를 지원하지 않기 때문에 rss2 추천</span><br><span class="line">  path: rss2.xml //feed가 생성될 경로</span><br><span class="line">  limit: 20 //최신 포스트 갯수 설정(0 또는 false는 전체 포스트)</span><br></pre></td></tr></table></figure><br><h6 id="5-hexo-generator-seo-friendly-sitemap"><a href="#5-hexo-generator-seo-friendly-sitemap" class="headerlink" title="5. hexo-generator-seo-friendly-sitemap"></a>5. <code>hexo-generator-seo-friendly-sitemap</code></h6><p><strong>크롤러가 블로그를 더욱 효율적으로 크롤링 할 수 있도록 사이트맵 xml 파일을 자동으로 생성해 줍니다.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure><p>위와 같이 <code>git</code>을 통하여 모듈을 설치합니다.<br>설치 후 블로그 디렉토리의 <code>_config.yml(테마 _config.yml 아닙니다.)</code> 파일을 열어 아래와 같이 입력해줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml //sitemap이 생성될 경로</span><br><span class="line">  tag: false //sitemap에 tag 포함 여부</span><br><span class="line">  category: false //sitemap에 category 포함 여부</span><br></pre></td></tr></table></figure><br>모두 추가하게 되면 _config.yml는 아래와 같이 작성되게 됩니다.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: https://username.github.io</span><br><span class="line">//url : https://github.com/username/username.github.io</span><br><span class="line">=&gt; 이렇게(블로그 주소가 아니라 repository 주소) 입력하게 되면 rss2.xml에서 파일 경로를 제대로 읽어오지 못하기 때문에 주의!</span><br><span class="line">...</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/username/username.github.io # 깃허브 페이지가 저장된 리포지토리 주소</span><br><span class="line">  branch: main</span><br><span class="line">nofollow:</span><br><span class="line">  enable: true</span><br><span class="line">feed:</span><br><span class="line">  type: rss2</span><br><span class="line">  path: rss2.xml</span><br><span class="line">  limit: 20</span><br><span class="line">#sitemap auto generator</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  tag: false</span><br><span class="line">  category: false</span><br><span class="line">robotstxt:</span><br><span class="line">  useragent: &quot;*&quot;</span><br><span class="line">  allow:</span><br><span class="line">    - /</span><br><span class="line">  sitemap: https://username.github.io/sitemap.xml</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/">한국어</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/">학습</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      
      <category domain="https://bny9164.github.io/tags/seo/">seo</category>
      
      <category domain="https://bny9164.github.io/tags/SEO/">SEO</category>
      
      <category domain="https://bny9164.github.io/tags/hexo/">hexo</category>
      
      <category domain="https://bny9164.github.io/tags/%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EC%B5%9C%EC%A0%81%ED%99%94/">검색엔진최적화</category>
      
      <category domain="https://bny9164.github.io/tags/hexo-%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84-%EC%B5%9C%EC%A0%81%ED%99%94/">hexo 검색엔진 최적화</category>
      
      
      <comments>https://bny9164.github.io/2020/11/18/2021-10-15-ko-SEO/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RTSP란?</title>
      <link>https://bny9164.github.io/2020/11/17/2021-10-15-ko-RTSP/</link>
      <guid>https://bny9164.github.io/2020/11/17/2021-10-15-ko-RTSP/</guid>
      <pubDate>Tue, 17 Nov 2020 07:28:29 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;RTSP(real time streaming protocol)&lt;/code&gt; 는 실시간 멀티미디어 스트림을 제어하기 위한 프로토콜이다.&lt;br&gt;RealNetwork사, Netscape사, IBM사 등이 공동개발을 하였다.&lt;/p&gt;
&lt;h4 i</description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>RTSP(real time streaming protocol)</code> 는 실시간 멀티미디어 스트림을 제어하기 위한 프로토콜이다.<br>RealNetwork사, Netscape사, IBM사 등이 공동개발을 하였다.</p><h4 id="RTSP의-특징"><a href="#RTSP의-특징" class="headerlink" title="RTSP의 특징"></a>RTSP의 특징</h4><ul><li>다지점 스트리밍 응용을 위한 기반구조</li></ul><ul><li>응용계층에서 유니캐스트 또는 멀티캐스트 연결 모두를 사용하는 다지점 응용에서, 멀티미디어 스트림 제어를 위한 프로토콜 제공이라는 목적을 가지나, 프로토콜이라기 보다는 기반구조라고 볼 수 있음<br></li></ul><ul><li>클라이언트/서버 형태로 동작</li></ul><ul><li>구조,문법,동작방식이 HTTP 와 매우 유사<br></li></ul><ul><li>세션 관리</li></ul><ul><li>다지점 다수개의 멀티미디어 세션의 설정과 제어가 RTSP에 의하여 제어됨</li><li>RTSP의 자원 관리 셋업 및 예약은 RSVP를 가지고 사용 가능<br></li></ul><ul><li>여러 프로토콜들이 관련됨</li></ul><ul><li><p>실제 멀티미디어 정보의 실시간 전송 매커니즘은 RTP/RTCP에 기본을 두고 있음</p><ul><li>RTP/RTCP : 오디오,비디오 등에서 시간 동기화된 스트림을 생성 및 제어함</li></ul></li><li><p>신뢰적인 TCP, 비신뢰적인 UDP 등 다양한 전송 프로토콜 위에서 동작 가능<br>주로 UDP 위에서 동작</p><ul><li>이러한 프로토콜의 도움을 받아 RTSP/RTP(RTCP) 실시간 패킷이 전달됨</li></ul></li><li><p>RTP,RTCP와는 다른 채널 사용 (데이터 전송 포트와 다른 포트번호로써 554번 사용) + RTP,RTCP는 동일 채널을 통해 전송된다. + RSTP는 RTP/RTCP와 다른 채널을 사용하여 전체 스트리밍 제어를 수행함</p><br></li></ul><h4 id="스트리밍-재생과-관련된-제어-명령어"><a href="#스트리밍-재생과-관련된-제어-명령어" class="headerlink" title="스트리밍 재생과 관련된 제어 명령어"></a>스트리밍 재생과 관련된 제어 명령어</h4><p>ㅇ Setup(연결설정), Play(재생), Forward, Rewind, Pause(일시멈춤), Stop(완전정지), Resume(다시시작), Record, Teardown(연결해제) 등 - 가정용 VCR을 인터넷에 적용한 것임</p><p>ㅇ 인터넷 웹에 의한 구현 例<br><img src="/img/post/2021-10-15-ko/RTSP.jpg" alt="RTSP"></p><blockquote><footer><strong>차재복 (Cha Jae Bok)</strong><cite><a href="http://www.ktword.co.kr/abbr_view.php?m_temp1=1798">www.ktword.co.kr/abbr_view.php?m_temp1=1798</a></cite></footer></blockquote>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/">한국어</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/">학습</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/%EA%B8%B0%EC%88%A0-%EC%9A%A9%EC%96%B4/">기술 용어</category>
      
      
      <category domain="https://bny9164.github.io/tags/RTSP/">RTSP</category>
      
      <category domain="https://bny9164.github.io/tags/realtime/">realtime</category>
      
      <category domain="https://bny9164.github.io/tags/streaming/">streaming</category>
      
      <category domain="https://bny9164.github.io/tags/protocol-%EA%B0%9C%EB%85%90/">protocol 개념</category>
      
      
      <comments>https://bny9164.github.io/2020/11/17/2021-10-15-ko-RTSP/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ONVIF란?</title>
      <link>https://bny9164.github.io/2020/11/15/2021-10-15-ko-ONVIF/</link>
      <guid>https://bny9164.github.io/2020/11/15/2021-10-15-ko-ONVIF/</guid>
      <pubDate>Sun, 15 Nov 2020 06:44:51 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;ONVIF(Open Network Video Interface Forum 오픈 네트워크 비디오 인터페이스 포럼[*], 온비프)는 세계 개방형 산업 포럼의 하나로서, 보안 목적의 물리적인 IP 기반 제품들의 인터페이스를 위한 세계 개방형 표준의 개</description>
        
      
      
      
      <content:encoded><![CDATA[<p>ONVIF(Open Network Video Interface Forum 오픈 네트워크 비디오 인터페이스 포럼[*], 온비프)는 세계 개방형 산업 포럼의 하나로서, 보안 목적의 물리적인 IP 기반 제품들의 인터페이스를 위한 세계 개방형 표준의 개발 및 이용을 용이하게 하는 것을 목적으로 한다. ONVIF는 동영상 감시 및 기타 물리적인 방범 지역 내의 IP 제품들이 어떻게 서로 통신할 수 있는지에 대한 표준을 만든다. ONVIF는 2008년 액시스 커뮤니케이션스, 보쉬 시큐리티 시스템스, 소니가 시작한 단체이다.<br>간단히 말해 카메라를 제어할 때 사용되는 <code>국제 표준 프로토콜</code>이고 자세히 말하면 보안장비(CCTV, 카메라, 뷰어 등)에서 사용되는 표준 프로토콜이다.</p><h3 id="프로파일"><a href="#프로파일" class="headerlink" title="프로파일"></a>프로파일</h3><p>프로파일 S<br>비디오 및 오디오 스트리밍, PTZ 옵션, 릴레이 액티베이션 등의 IP 비디오 시스템의 공통 기능을 언급한다.<br>프로파일 C<br>도어 상태 및 제어, 자격 관리, 이벤트 관리 등의 IP 접근 통제 시스템의 공통 기능을 설명한다.<br>프로파일 G<br>비디오 스토리지, 녹화, 검색을 설명한다.<br>프로파일 Q<br>장치 발견, 구성, TLS 인증의 관리에 대해 설명한다.<br>프로파일 A<br>정보, 상태, 이벤트의 검색을 수행하고, 접근 규칙, 자격 정보, 스케줄 등의 PACS(물리 접근 제어 시스템) 관련 항목들을 구성하는 기능이다.<br>프로파일 T<br>(출시 후보/RC) H.264, H.265 인코딩 포맷, 이미징 설정, 알람 이벤트(모션, 부당 변경 감지 등) 등의 비디오 스트리밍 기능을 지원한다.</p><h3 id="용도"><a href="#용도" class="headerlink" title="용도"></a>용도</h3><p>보안장비끼리 서로 연결되어 동작하게 해주는 프로토콜이다.<br><img src="/img/post/2021-10-15-ko/ONVIF.png" alt="ONVIF"></p><p>일반적으로 보안장비, 영상장비들은 다양한 프로토콜을 지원하고 있는데 자사 표준 프로토콜과 <code>국제 표준 프로토콜(ONVIF)</code>을 사용한다.<br><code>국제 표준 프로토콜(ONVIF)</code>의 경우 해당 장비에만 특화되어 있는 기능을 지원하지 않기 때문에 자사 표준 프로토콜을 사용하는 경우도 있다.<br>ONVIF를 사용할 경우 전세계 공통적으로 사용하는 프로토콜이기 때문에 새로운 사양이나 변경되는 작업이 어렵고 오래 걸린다. 하지만 세계 표준이기 때문에 세계 어디서든 사용할 수 있다.</p><p>일반적으로 프로토콜은 socket 통신 기반 프로토콜과 HTTP기반 프로토콜이 있는데 ONVIF는 HTTP 프로토콜을 사용한다.</p><table><thead><tr><th align="center">기능</th><th align="center">프로토콜의 종류</th></tr></thead><tbody><tr><td align="center">영상, 음성, 이벤트 송수신</td><td align="center">RTP/RTSP 프로토콜</td></tr><tr><td align="center">제어, 설정, 조회</td><td align="center">WSDL, SOAP 프로토콜</td></tr></tbody></table><p>영상을 볼 때는 RTP/RTSP를 사용하고, IP를 변경하거나 설정을 변경하거나 할 때에는 WSDL, SOAP를 사용한다<br>ONVIF 프로토콜이 RTP/RTSP 프로토콜을 구현한게 아니라 카메라와 같은 장비를 사용할 수 있도록 RTP/RTSP 주소를 알려주는 역할을 한다.</p>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/">한국어</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/">학습</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/%EA%B8%B0%EC%88%A0-%EC%9A%A9%EC%96%B4/">기술 용어</category>
      
      
      <category domain="https://bny9164.github.io/tags/ONVIF/">ONVIF</category>
      
      <category domain="https://bny9164.github.io/tags/RTP/">RTP</category>
      
      <category domain="https://bny9164.github.io/tags/RTSP/">RTSP</category>
      
      <category domain="https://bny9164.github.io/tags/ONVIF-%EA%B0%9C%EB%85%90/">ONVIF 개념</category>
      
      <category domain="https://bny9164.github.io/tags/ONVIF-%EB%9C%BB/">ONVIF 뜻</category>
      
      
      <comments>https://bny9164.github.io/2020/11/15/2021-10-15-ko-ONVIF/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
