<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Developer &amp; Modeler</title>
    <link>https://bny9164.github.io/</link>
    
    <atom:link href="https://bny9164.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 19 Oct 2021 00:21:04 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>NVM을 활용한 node.js 버전 관리</title>
      <link>https://bny9164.github.io/2021/10/18/2021-10-18-ko-NVM/</link>
      <guid>https://bny9164.github.io/2021/10/18/2021-10-18-ko-NVM/</guid>
      <pubDate>Mon, 18 Oct 2021 06:58:51 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;여러 프로젝트를 관리하면서 여러 노드 버전을 사용해야 될 상황이 오게 됩니다. 저 같은 경우도 블로그를 관리 할 땐 12.x 버전을 사용하고 프로젝트를 진행할 때는 14.x 버전을 사용합니다. 프로젝트를 변경할 때마다 해당하는 특정 노드 버전을 </description>
        
      
      
      
      <content:encoded><![CDATA[<p>여러 프로젝트를 관리하면서 여러 노드 버전을 사용해야 될 상황이 오게 됩니다. 저 같은 경우도 블로그를 관리 할 땐 12.x 버전을 사용하고 프로젝트를 진행할 때는 14.x 버전을 사용합니다. 프로젝트를 변경할 때마다 해당하는 특정 노드 버전을 설치해주는 것은 굉장히 비효율적인 방법이기 때문에 효율적으로 노드 버전을 관리해야 합니다. 이런 문제를 해결하기 위해 나온 것이 <a href="https://github.com/nvm-sh/nvm" title="" target="">NVM</a>[Node Version Manager] 입니다.</p><p>NVM은 다양한 버전의 노드를 설치, 관리할 수 있고 자신의 원하는 버전을 선택할 수 있습니다.</p><h2 id="1-NVM-설치하기"><a href="#1-NVM-설치하기" class="headerlink" title="1. NVM 설치하기"></a>1. NVM 설치하기</h2><br><p>nvm은 <a href="https://github.com/coreybutler/nvm-windows/releases" title="" target="">여기서</a> 설치할 수 있습니다.<br>위 페이지로 이동하게 되면 NVM의 설명과 다운로드 할 수 있는 파일들이 나오는데 아래의 파일을 다운로드하면 됩니다.<br><img src="/images/post/2021-10-18/nvm1.jpg"></p><br><p>압축을 풀면 <code>nvm-setup.exe</code> 파일이 나오는데 이 파일을 설치해주시면 됩니다.<br>압축을 푼 후 아래의 명령어를 입력하시면 설치된 nvm 버전을 알 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm version</span><br></pre></td></tr></table></figure><br><p><img src="/images/post/2021-10-18/nvm2.png"></p><h2 id="2-노드-버전-확인"><a href="#2-노드-버전-확인" class="headerlink" title="2. 노드 버전 확인"></a>2. 노드 버전 확인</h2><br><p>아래의 명령어로 현재 설치되어 있는 노드의 버전을 확인 할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls //nvm list</span><br></pre></td></tr></table></figure><br><p><img src="/images/post/2021-10-18/nvm3.png"></p><p>현재 저는 2개의 노드 버전이 설치되어 있고 * 표시는 <strong>사용되고 있는 노드의 버전</strong>을 나타냅니다.</p><h2 id="3-특정-노드-버전-설치"><a href="#3-특정-노드-버전-설치" class="headerlink" title="3. 특정 노드 버전 설치"></a>3. 특정 노드 버전 설치</h2><br><p>아래의 명령어로 특정 노드 버전을 설치할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install v15.11.0 //설치할 버전 입력</span><br></pre></td></tr></table></figure><h2 id="4-특정-노드-버전-활성화-시키기"><a href="#4-특정-노드-버전-활성화-시키기" class="headerlink" title="4. 특정 노드 버전 활성화 시키기"></a>4. 특정 노드 버전 활성화 시키기</h2><br><p>노드의 버전 활성화는 아래의 명령어로 할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 15.11.0 //사용할 버전 입력</span><br></pre></td></tr></table></figure><br><p><code>nvm use 버전</code>을 입력하면 아래의 이미지와 같이 * 표시가 현재 사용되고 있는 노드버전으로 변경됩니다.</p><br><p><img src="/images/post/2021-10-18/nvm4.png"></p><br><p>※ window 환경에서는 <code>nvm use</code> 커맨드를 입력할 때 <code>access deined</code>라는 메세지가 나올 수 있는데 권한이 없어서 나오는 메세지 입니다.<br><img src="/images/post/2021-10-18/nvm5.png"></p><p>CMD나 bash을 실행할 때 관리자 권한으로 실행해주시고 변경하면 됩니다.</p><br>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/">한국어</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/">학습</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/nodejs/">nodejs</category>
      
      
      <category domain="https://bny9164.github.io/tags/NODE/">NODE</category>
      
      <category domain="https://bny9164.github.io/tags/NODEJS/">NODEJS</category>
      
      <category domain="https://bny9164.github.io/tags/NVM/">NVM</category>
      
      <category domain="https://bny9164.github.io/tags/NODEJS-%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC/">NODEJS 버전관리</category>
      
      <category domain="https://bny9164.github.io/tags/NVM-%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC/">NVM 버전관리</category>
      
      
      <comments>https://bny9164.github.io/2021/10/18/2021-10-18-ko-NVM/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NVMを活用したNode.jsバージョン管理</title>
      <link>https://bny9164.github.io/2021/10/18/2021-10-18-jp-NVM/</link>
      <guid>https://bny9164.github.io/2021/10/18/2021-10-18-jp-NVM/</guid>
      <pubDate>Mon, 18 Oct 2021 06:58:51 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;様々なプロジェクトを管理しながら、複数のノードバージョンを使わなければならない状況になります。私の場合も、ブログ管理の場合は12.x バージョン、プロジェクトの場合は14.xバージョンを使います。プロジェクトを変更するたびに該当する特定ノードバージョンをインストールするのは</description>
        
      
      
      
      <content:encoded><![CDATA[<p>様々なプロジェクトを管理しながら、複数のノードバージョンを使わなければならない状況になります。私の場合も、ブログ管理の場合は12.x バージョン、プロジェクトの場合は14.xバージョンを使います。プロジェクトを変更するたびに該当する特定ノードバージョンをインストールするのは非常に非効率的な方法であるため、効率的にノードバージョンを管理する必要があります。このような問題を解決するために出てきたのが、<a href="https://github.com/nvm-sh" title="" target="">NVM</a>[Node Version Manager]です。</p><p>NVMは、様々なバージョンのノードをインストール·管理でき、自分のバージョンを選択できます。</p><h2 id="1-NVM-をインストールする"><a href="#1-NVM-をインストールする" class="headerlink" title="1. NVM をインストールする"></a>1. NVM をインストールする</h2><br><p>nvm は、<a href="%E3%81%93%E3%81%93%E3%81%A7https://github.com/coreybutler/nvm-windows" title="" target=""></a>設置することができます。<br>上のページに移動すると、NVMの説明とダウンロードできるファイルが出てきますが、下のファイルをダウンロードすればいいです。<br><img src="/images/post/2021-10-18/nvm1.jpg"></p><br><p>圧縮を解除すると<code>nvm-setup.exe</code>というファイルが出てきますので、このファイルを設置すれば OK です。<br>圧縮を解除した後、以下のコマンドを入力すると、インストールされたnvmバージョンが分かります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm version</span><br></pre></td></tr></table></figure><br><p><img src="/images/post/2021-10-18/nvm2.png"></p><h2 id="2-ノードバージョン確認"><a href="#2-ノードバージョン確認" class="headerlink" title="2. ノードバージョン確認"></a>2. ノードバージョン確認</h2><br><p>以下のコマンドで、現在インストールされているノードのバージョンを確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls //nvm list</span><br></pre></td></tr></table></figure><br><p><img src="/images/post/2021-10-18/nvm3.png"></p><p>現在、私は2つのノードバージョンがインストールされており、*マークは<strong>使われているノードのバージョン</strong>を示します。</p><h2 id="3-特定ノードバージョンのインストール"><a href="#3-特定ノードバージョンのインストール" class="headerlink" title="3. 特定ノードバージョンのインストール"></a>3. 特定ノードバージョンのインストール</h2><br><p>以下のコマンドで特定ノードバージョンをインストールできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install v15.11.0 //インストールするバージョン入力</span><br></pre></td></tr></table></figure><h2 id="4-特定ノードバージョンを有効にする"><a href="#4-特定ノードバージョンを有効にする" class="headerlink" title="4. 特定ノードバージョンを有効にする"></a>4. 特定ノードバージョンを有効にする</h2><br><p>ノードのバージョン有効化は以下のコマンドで行えます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 15.11.0 //使用するバージョン入力</span><br></pre></td></tr></table></figure><br><p><code>nvm use バージョン</code>を入力すると、以下の画像のように*表示が現在使用されているノードバージョンに変更されます。</p><br><p><img src="/images/post/2021-10-18/nvm4.png"></p><br><p>※ Window環境では<code>nvm use</code>コマンドを入力するときに<code>access deined</code>というメッセージが表示されますが、権限がないために表示されるメッセージです。<br><img src="/images/post/2021-10-18/nvm5.png"></p><p>CMDやbashを実行する際に管理者の権限で実行し、変更してください。</p><br>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/">日本語</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/">学習</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/nodejs/">nodejs</category>
      
      
      <category domain="https://bny9164.github.io/tags/NODE/">NODE</category>
      
      <category domain="https://bny9164.github.io/tags/NODEJS/">NODEJS</category>
      
      <category domain="https://bny9164.github.io/tags/NVM/">NVM</category>
      
      <category domain="https://bny9164.github.io/tags/NODEJS-%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/">NODEJS バージョン管理</category>
      
      <category domain="https://bny9164.github.io/tags/NVM-%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/">NVM バージョン管理</category>
      
      
      <comments>https://bny9164.github.io/2021/10/18/2021-10-18-jp-NVM/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Http通信とSocket通信の違い</title>
      <link>https://bny9164.github.io/2020/12/13/2021-10-18-jp-socket/</link>
      <guid>https://bny9164.github.io/2020/12/13/2021-10-18-jp-socket/</guid>
      <pubDate>Sun, 13 Dec 2020 01:19:14 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;一般的に、デバイスで必要とされるデータはサーバーで管理します。 ネットワークを通じてサーバからデータを取得するための通信方式には、大きく分けて Http 通信と Socket 通信の 2 種類がありますが、今日はこの 2 つの通信方式の違いについて見ていきたいと思います。&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>一般的に、デバイスで必要とされるデータはサーバーで管理します。 ネットワークを通じてサーバからデータを取得するための通信方式には、大きく分けて Http 通信と Socket 通信の 2 種類がありますが、今日はこの 2 つの通信方式の違いについて見ていきたいと思います。</p><br><h2 id="Http-通信"><a href="#Http-通信" class="headerlink" title="Http 通信"></a>Http 通信</h2><br><p><strong>クライアントのリクエストがある場合のみ、サーバーが応答(Response)して当該情報を送信し、すぐに接続を終了する方式</strong></p><p>Http 通信は Client の要請があるときだけ Server が応答して処理をした後に連結を絶つ方法です。 このような接続方法は<code>Clientが要請を送る場合にのみServerが応答するワン・ウェイ・コニュニケーション</code>で、Server が Client で要請を送ることはできません。 理解を助けるために皆さんがこのブログの内容を見るためにブログに入ってくる状況を例に挙げてみます。 皆さんがこのブログのためのリンクをクリックした瞬間に Client(ウェブ)は Server(ウェブサーバ)にこの文に対する内容を送ってほしいと要請をしたのです。 この文に対する内容を受けた後は、連結が終了されます。 そのために要請を送るとき、内容を待つ時間と共に連結する時間が入るようになります。 このような Http 通信は、リアルタイム接続がなく、<code>必要な場合のみServerにアクセスするコンテンツ中心のデータを使用するとき用意</code>です。 もしブログに対する内容を要請するため、リアルタイムでつなぐを維持する Socket 通信を使用することになると、ブログの内容を受けた後も、引き続き通信のための連結が成立しており、負荷がかかります。 一般的にモバイルアプリケーションは必要な場合のみ Server で情報を要請する場合が多いが、このような Web Server で Http 通信を主に使用して費用や保守などほとんどの方面でいいです。</p><p><img src="/images/post/2021-10-18/http.png" alt="http 通信"></p><h5 id="Http-通信の特徴"><a href="#Http-通信の特徴" class="headerlink" title="Http 通信の特徴"></a>Http 通信の特徴</h5><ul><li>クライアントがリクエストを送信した場合にのみ、サーバーが応答するワン・ウェイ・コニュニケーションである。</li><li>サーバーからの応答を受けた後は、接続がすぐに終了する。</li><li>リアルタイムの接続ではなく、必要な場合にのみサーバーに要請を送る状況に有用である。</li><li>要請を送ってサーバーの応答を待つアプリケーション(Android or Ios)の開発に主に使われる。</li></ul><br><h2 id="Socket-通信"><a href="#Socket-通信" class="headerlink" title="Socket 通信"></a>Socket 通信</h2><p><strong>サーバーとクライアントが特定ポートを通じてリアルタイムでツーウエー・コミュニケーションする方式</strong></p><p>Socket 通信は Http 通信とは違って、<code>ServerとClientが特定Portを通じて連結を成立しており、リアルタイムでツーウエー・コミュニケーションする方式です</code>。 Client のみ必要な場合に要請を送る Http 通信とは違って、Socket 通信は Server も Client で要請を送ることができ、ずっとつながりを維持する連結志向型通信であるため、<code>リアルタイムの通信が必要な場合によく使用</code>されます。 例えば、リアルタイム Streaming の中継やリアルタイムでチャットと一緒に即座に情報をやり取りする場合に使用します。 例えば、リアルタイム動画 Streaming サービスを Http 通信で具現したと仮定します。 このような場合に使用者がサーバに動画を要請するためには動画が終了される瞬間まで継続して Http 通信を送らなければならない、このような構造は引き続き連結を要請するために負荷がかかります。 従って、このような場合には Socket を通じて具現することが適しています。</p><p><img src="/images/post/2021-10-18/socket.png" alt="socket 通信"></p><h5 id="Socket-通信の特徴"><a href="#Socket-通信の特徴" class="headerlink" title="Socket 通信の特徴"></a>Socket 通信の特徴</h5><p>-Server と Client がずっとつながりを維持するツーウエー・コミュニケーションである。<br>-Server と Client がリアルタイムでデータをやり取りする状況が必要な場合に使用される。 -リアルタイム動画 Streaming やオンラインゲームなどのような場合によく使用される。</p><blockquote><footer><strong>参考</strong><cite><a href="https://mangkyu.tistory.com/48">mangkyu.tistory.com/48</a></cite></footer></blockquote>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/">日本語</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/">学習</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/%E6%8A%80%E8%A1%93%E7%94%A8%E8%AA%9E/">技術用語</category>
      
      
      <category domain="https://bny9164.github.io/tags/http-%E9%80%9A%E4%BF%A1/">http 通信</category>
      
      <category domain="https://bny9164.github.io/tags/socket-%E9%80%9A%E4%BF%A1/">socket 通信</category>
      
      <category domain="https://bny9164.github.io/tags/http-%E9%80%9A%E4%BF%A1-socket-%E9%80%9A%E4%BF%A1%E3%81%AE%E9%81%95%E3%81%84/">http 通信 socket 通信の違い</category>
      
      
      <comments>https://bny9164.github.io/2020/12/13/2021-10-18-jp-socket/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>(통신 방식) Http 통신과 Socket 통신 차이</title>
      <link>https://bny9164.github.io/2020/12/11/2021-10-18-ko-socket/</link>
      <guid>https://bny9164.github.io/2020/12/11/2021-10-18-ko-socket/</guid>
      <pubDate>Fri, 11 Dec 2020 00:54:01 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;일반적으로 단말기에서 필요로 하는 데이터들은 Server에서 관리합니다. 네트워크를 통해 서버로부터 데이터를 가져오기 위한 통신 방식은 크게 Http 통신과 Socket 통신 2가지가 있는데, 오늘은 이 2가지 통신 방식의 차이에 대해 알아보도록</description>
        
      
      
      
      <content:encoded><![CDATA[<p>일반적으로 단말기에서 필요로 하는 데이터들은 Server에서 관리합니다. 네트워크를 통해 서버로부터 데이터를 가져오기 위한 통신 방식은 크게 Http 통신과 Socket 통신 2가지가 있는데, 오늘은 이 2가지 통신 방식의 차이에 대해 알아보도록 하겠습니다.</p><br><h2 id="Http-통신"><a href="#Http-통신" class="headerlink" title="Http 통신"></a>Http 통신</h2><br><p><strong>Client의 요청(Request)이 있을 때만 서버가 응답(Response)하여 해당 정보를 전송하고 곧바로 연결을 종료하는 방식</strong></p><p>Http통신은 Client의 요청이 있을 때만 Server가 응답하여 처리를 한 후에 연결을 끊는 방식입니다. 이러한 연결 방식은 <code>Client가 요청을 보내는 경우에만 Server가 응답하는 단방향적 통신</code>으로, Server가 Client로 요청을 보낼수는 없습니다. 이해를 돕기 위해 여러분들이 이 글을 보기 위해 블로그에 들어오는 상황을 예로 들어보겠습니다. 여러분들이 이 글을 위한 링크를 클릭한 순간에 Client(웹)는 Server(웹서버)로 이 글에 대한 내용을 보내달라고 요청을 한 것입니다. 이 글에 대한 내용들을 받은 후에는 바로 연결이 종료됩니다. 그렇기 때문에 요청을 보낼때, 내용을 기다리는 시간과 함께 연결하는 시간이 들어가게 됩니다. 이러한 Http 통신은 실시간 연결이 아닌, <code>필요한 경우에만 Server로 접근하는 콘텐츠 위주의 데이터를 사용할 때 용이</code>합니다. 만약 게시물에 대한 내용을 요청하기 위해 실시간으로 연결을 유지하는 Socket통신을 사용하게 되면, 게시물을 받은 후에도 계속 통신을 위한 연결이 성립되어 있어 부하가 걸리게 됩니다. 일반적으로 모바일 어플리케이션은 필요한 경우에만 Server로 정보를 요청하는 경우가 많은데, 이러한 Web Server로 Http 통신을 주로 사용하며 비용 및 유지보수 등 대부분의 방면에서 좋습니다.</p><p><img src="/images/post/2021-10-18/http.png" alt="http 통신"></p><h5 id="Http-통신의-특징"><a href="#Http-통신의-특징" class="headerlink" title="Http 통신의 특징"></a>Http 통신의 특징</h5><ul><li>Client가 요청을 보내는 경우에만 Server가 응답하는 단방향 통신이다.</li><li>Server로부터 응답을 받은 후에는 연결이 바로 종료된다.</li><li>실시간 연결이 아니고, 필요한 경우에만 Server로 요청을 보내는 상황에 유용하다.</li><li>요청을 보내 Server의 응답을 기다리는 어플리케이션(Android or Ios)의 개발에 주로 사용된다.</li></ul><br><h2 id="Socket-통신"><a href="#Socket-통신" class="headerlink" title="Socket 통신"></a>Socket 통신</h2><br><p><strong>Server와 Client가 특정 Port를 통해 실시간으로 양방향 통신을 하는 방식</strong></p><p>Socket통신은 Http 통신과 달리 <code>Server와 Client가 특정 Port를 통해 연결을 성립하고 있어 실시간으로 양방향 통신을 하는 방식</code>입니다. Client만 필요한 경우에 요청을 보내는 Http 통신과 달리 Socket 통신은 Server 역시 Client로 요청을 보낼 수 있으며, 계속 연결을 유지하는 연결지향형 통신이기 때문에 <code>실시간 통신이 필요한 경우에 자주 사용</code>됩니다. 예를 들면, 실시간 Streaming 중계나 실시간 채팅과 같이 즉각적으로 정보를 주고받는 경우에 사용합니다. 예를 들어 실시간 동영상 Streaming 서비스를 Http 통신으로 구현하였다고 가정하겠습니다. 이러한 경우에 사용자가 서버로 동영상을 요청하기 위해서는 동영상이 종료되는 순간까지 계속해서 Http 통신을 보내야 하고 이러한 구조는 계속 연결을 요청하기 때문에 부하가 걸리게 됩니다. 그러므로 이러한 경우에는 Socket을 통해 구현하는 것이 적합합니다.</p><p><img src="/images/post/2021-10-18/socket.png" alt="socket 통신"></p><h5 id="Socket-통신의-특징"><a href="#Socket-통신의-특징" class="headerlink" title="Socket 통신의 특징"></a>Socket 통신의 특징</h5><ul><li>Server와 Client가 계속 연결을 유지하는 양방향 통신이다.</li><li>Server와 Client가 실시간으로 데이터를 주고받는 상황이 필요한 경우에 사용된다.</li><li>실시간 동영상 Streaming이나 온라인 게임 등과 같은 경우에 자주 사용된다.</li></ul><blockquote><footer><strong>출처</strong><cite><a href="https://mangkyu.tistory.com/48">mangkyu.tistory.com/48</a></cite></footer></blockquote>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/">한국어</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/">학습</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/%EA%B8%B0%EC%88%A0%EC%9A%A9%EC%96%B4/">기술용어</category>
      
      
      <category domain="https://bny9164.github.io/tags/http-%ED%86%B5%EC%8B%A0/">http 통신</category>
      
      <category domain="https://bny9164.github.io/tags/socket-%ED%86%B5%EC%8B%A0/">socket 통신</category>
      
      <category domain="https://bny9164.github.io/tags/http-%ED%86%B5%EC%8B%A0%EA%B3%BC-socket-%ED%86%B5%EC%8B%A0%EC%9D%98-%EC%B0%A8%EC%9D%B4/">http 통신과 socket 통신의 차이</category>
      
      
      <comments>https://bny9164.github.io/2020/12/11/2021-10-18-ko-socket/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TCP/IPとは?</title>
      <link>https://bny9164.github.io/2020/12/07/2021-10-18-jp-TCPIP/</link>
      <guid>https://bny9164.github.io/2020/12/07/2021-10-18-jp-TCPIP/</guid>
      <pubDate>Mon, 07 Dec 2020 03:30:29 GMT</pubDate>
      
        
        
      <description>&lt;br&gt;

&lt;h4 id=&quot;TCP-IP&quot;&gt;&lt;a href=&quot;#TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP&quot;&gt;&lt;/a&gt;TCP/IP&lt;/h4&gt;&lt;p&gt;インターネットプログラムが通信をするにあたって、HTTP、SFTP、FTP など様々なプロトコル</description>
        
      
      
      
      <content:encoded><![CDATA[<br><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><p>インターネットプログラムが通信をするにあたって、HTTP、SFTP、FTP など様々なプロトコルがあります。 インターネットプロトコルで最も多く使用される代表的なプロトコルは、皆さんご存知の通り IP です。 ここで重要なことは<code>TCPIP</code>は階層ではなくプロトコルであることです。<br><code>TCPIP</code>は OSI7 階層とは少し異なる<code>TCPIP</code>の構造的な階層の上で動作します。</p><br><p><img src="/images/post/2021-10-18/tcp-ip_1.png" alt="tcp/ip"><br>OSI7 階層とは少し異なる様子です。<br>階層の個数も違って OSI は 7 階層であるのに対し、TCPIP 階層は 4 階層全てであることが分かります。</p><br><h3 id="1-ネットワークインタフェース階層-Network-Interface-Layer"><a href="#1-ネットワークインタフェース階層-Network-Interface-Layer" class="headerlink" title="1. ネットワークインタフェース階層 (Network Interface Layer)"></a>1. ネットワークインタフェース階層 (Network Interface Layer)</h3><p>この階層は、Node-To-Node 間の信頼性のあるデータ伝送を担う階層です。<br>OSI7 階層の物理階層とデータリンク階層の役割を、同ネットワークインタフェース階層が担っています。<br>したがって、MAC アドレスがこの階層で使用されます。<br>ネットワークインタフェース階層がデータリンク階層まで担当するので、MAC アドレスが使用されます。<br><img src="/images/post/2021-10-18/lan-card.jpg" alt="LANカード"><br>上の装備はランカードです。 正確な名称は NIC といい<code>Network Interface Card</code>です。<br>LAN カードがないとネットワーク通信はできません。ネットワークインタフェース階層で動作するデバイスです。</p><p>LAN 上では Ethernet、TokenRing、FDDI などがあり、WAN 上では X.25、FrameRelay、PPP などがあります。</p><br><h3 id="2-インターネット階層-Internet-Layer"><a href="#2-インターネット階層-Internet-Layer" class="headerlink" title="2. インターネット階層 (Internet Layer)"></a>2. インターネット階層 (Internet Layer)</h3><p>OSI7 階層のネットワーク階層を担う階層です。 OSI7 階層のようにホスト間のルーティングを担当することになります。<br>インターネット階層で動作するプロトコルは以下の通りです。</p><ul><li><p>IP(Internet Protocol):非信頼性、非連結指向データグラムプロトコル</p></li><li><p>ARP(Address Resolution Protocol):アドレス変換プロトコルです。 IP アドレスを MAC アドレスに変換するプロトコル</p></li><li><p>RARP(Reverse ARP):逆に MAC アドレスで IP アドレスを探すプロトコル</p></li><li><p>ICMP（Internet Control Message Protocol）:状態診断メッセージプロトコル。 このプロトコルを利用する代表的なプログラムが ping</p></li><li><p>IGMP(Internet Group Message Protocol):マルチキャスト用プロトコル</p></li></ul><br><h3 id="3-伝送階層-Transport-Layer"><a href="#3-伝送階層-Transport-Layer" class="headerlink" title="3. 伝送階層 (Transport Layer)"></a>3. 伝送階層 (Transport Layer)</h3><p>OSI7 階層の伝送階層と同じです。 プロセス間の信頼性のあるデータ伝送を担う階層です。<br>process-to-process 転送を担当するためには論理的アドレスが必要ですが、process が使用するポート番号をその論理的アドレスとして使います。<br>転送階層で動作するプロトコルは下記の通りです。</p><ul><li><p>TCP (Transmission Control Protocol):信頼性のある接続指向型プロトコル。 信頼性があるというのは、そのペケットのエラー処理や再送信などでエラーを復旧することです。 そのため TCP のヘッダーに付く情報が多いです。</p></li><li><p>UDP (User Datagram Protocol):非信頼性非接続型プロトコルです。 ペケットを失ったりエラーがあっても対処しないことです。 したがって、UDP ヘッダーは簡単な構造を持っています。</p></li></ul><br><h3 id="4-応用階層-Application-Layer"><a href="#4-応用階層-Application-Layer" class="headerlink" title="4. 応用階層 (Application Layer)"></a>4. 応用階層 (Application Layer)</h3><p>ユーザーと最も近い階層です。 OSI7 階層の 5 階層から 7 階層までの機能を担っています。<br>サーバやクライアントアプリケーションがこの階層で動作します。 私たちが知っているブラウザやテルネットのようなサービスがこの階層で動作し、動作するためには転送階層のアドレス、つまりポート番号を使用します。 例えば、http が 88 番ポートを使用することと同じです。<br>応用階層で動作するプロトコルは以下の通りです。</p><ul><li><p>HTTP(Hyper-Text Transfer Protocol):TCP ベースのプロトコルでポート番号 80 番を使用</p></li><li><p>Telnet :TCP ポート番号 23 番を使用します。 遠隔ターミナルを接続する際にこのプロトコルを使用</p></li><li><p>SSH(Secure Shell):テルネットのようなサービスはセキュリティに脆弱。 パスワードが暗号化されていないため、そのまま表示されます。 これを補完したものが SSH です。 ポート番号 22 番を使用します。 SFTP のようなプロトコルも 22 番ポートで主要使用します。</p></li><li><p>FTP(File Transfer Protocol): ファイル転送プロトコル。 ファイルのダウンロードやアップロードに FTP を使用。 FTP は、ファイルのアップロードやダウンロードの際、信頼性を重要視するため、TCP で動作します。 2 つのポートを使用します。</p></li></ul><p>TCP ポート 20 番はデータ転送のための用途、TCP ポート 21 番は制御用として使用します。</p><ul><li><p>SMTP (Simple Mail Transfer Protocol):メール転送プロトコルです。 TCP 上で動作し、ポートは 25 番を使用します。</p></li><li><p>POP3（Post Office Protocol Version 3）:メール受信用プロトコルです。 アウトルックのようなプログラムは POP3 というプロトコルを使って動作します。 TCP ポート 110 番を使用します。</p></li><li><p>DNS (Domain Name System):ドメイン名に対するホスト情報を提供します。 基本的に UDP 上で動作します。 基本的に失敗したらもう一度要請すればいいですし、それほど重要な情報ではないからです。 しかし、信頼性を要する場合には TCP 上でも動作します。 データが長い場合、同じ時に TCP ベースで動作できます。</p></li></ul><p>UDP、TCP ポート 53 番を使用します。</p><p>このように、ポート番号が特定のプロトコルが使用していては使えないポートがあります。 このようなポートを well-known port といいます。</p><blockquote><footer><strong>参考 :</strong><cite><a href="https://reakwon.tistory.com/68">reakwon.tistory.com/68</a></cite></footer></blockquote>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/">日本語</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/">学習</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/%E6%8A%80%E8%A1%93%E7%94%A8%E8%AA%9E/">技術用語</category>
      
      
      <category domain="https://bny9164.github.io/tags/TCP/">TCP</category>
      
      <category domain="https://bny9164.github.io/tags/IP/">IP</category>
      
      <category domain="https://bny9164.github.io/tags/TCP-IP/">TCP?IP</category>
      
      <category domain="https://bny9164.github.io/tags/TCP-%E6%A6%82%E5%BF%B5/">TCP 概念</category>
      
      <category domain="https://bny9164.github.io/tags/TCP-%E6%84%8F%E5%91%B3/">TCP 意味</category>
      
      <category domain="https://bny9164.github.io/tags/IP-%E6%A6%82%E5%BF%B5/">IP 概念</category>
      
      <category domain="https://bny9164.github.io/tags/IP-%E6%84%8F%E5%91%B3/">IP 意味</category>
      
      
      <comments>https://bny9164.github.io/2020/12/07/2021-10-18-jp-TCPIP/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TCP/IP란?</title>
      <link>https://bny9164.github.io/2020/12/01/2021-10-18-ko-TCPIP/</link>
      <guid>https://bny9164.github.io/2020/12/01/2021-10-18-ko-TCPIP/</guid>
      <pubDate>Tue, 01 Dec 2020 07:57:06 GMT</pubDate>
      
        
        
      <description>&lt;br&gt;

&lt;h4 id=&quot;TCP-IP&quot;&gt;&lt;a href=&quot;#TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP&quot;&gt;&lt;/a&gt;TCP/IP&lt;/h4&gt;&lt;p&gt;인터넷 프로그램들이 서로 통신을 하는데 있어서 HTTP, SFTP, FTP 등 다양한 </description>
        
      
      
      
      <content:encoded><![CDATA[<br><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><p>인터넷 프로그램들이 서로 통신을 하는데 있어서 HTTP, SFTP, FTP 등 다양한 프로토콜이 있습니다. 인터넷 프로토콜에서 가장 많이 사용하는 대표적인 프로토콜은 여러분들도 많이 아시다시피 IP입니다. 여기서 중요한 것은 <code>TCP/IP</code>는 계층이 아니라 프로토콜이라는 점 입니다.<br><code>TCP/IP</code>는 OSI7 계층과는 조금은 다른 <code>TCP/IP</code>의 구조적인 계층 위에서 동작합니다</p><br><p><img src="/images/post/2021-10-18/tcp-ip_1.png" alt="tcp/ip"><br>OSI7 계층과는 조금은 다른 모습입니다.<br>계층의 갯수 부터가 다르고. OSI는 7계층인데 반해 TCP/IP 계층은 4계층이 전부라는 것을 알 수 있습니다.</p><br><h3 id="1-네트워크-인터페이스-계층-Network-Interface-Layer"><a href="#1-네트워크-인터페이스-계층-Network-Interface-Layer" class="headerlink" title="1. 네트워크 인터페이스 계층 (Network Interface Layer)"></a>1. 네트워크 인터페이스 계층 (Network Interface Layer)</h3><p>이 계층은 Node-To-Node간의 신뢰성 있는 데이터 전송을 담당하는 계층입니다.<br>OSI7 계층의 물리 계층과 데이터링크 계층의 역할을 이 네트워크 인터페이스 계층이 담당합니다.<br>따라서 MAC주소가 이 계층에서 사용됩니다.<br>네트워크 인터페이스 계층이 바로 데이터링크 계층까지 담당하니까 MAC 어드레스가 사용됩니다.<br><img src="/images/post/2021-10-18/lan-card.jpg" alt="랜카드"><br>위의 장비는 랜카드 입니다. 정확한 명칭은 NIC라고 하여 <code>Network Interface Card</code>입니다.<br>바로 이 랜카드가 있어야만 네트워크 통신을 할 수 있는데, 네트워크 인터페이스 계층에서 동작하는 장비입니다.</p><p>LAN상에서는 Ethernet, TokenRing, FDDI 등이 있으며 WAN 상에서는 X.25, Frame Relay, PPP 등이 있습니다.</p><br><h3 id="2-인터넷-계층-Internet-Layer"><a href="#2-인터넷-계층-Internet-Layer" class="headerlink" title="2. 인터넷 계층 (Internet Layer)"></a>2. 인터넷 계층 (Internet Layer)</h3><p>OSI7계층의 네트워크 계층을 담당하는 계층입니다. OSI7 계층처럼 호스트간의 라우팅을 담당하게 됩니다.<br>인터넷 계층에서 동작하는 프로토콜에는 아래와 같습니다.</p><ul><li><p>IP(Internet Protocol) : 비신뢰성, 비연결지향 데이터그램 프로토콜</p></li><li><p>ARP(Address Resolution Protocol) : 주소변환 프로토콜입니다. IP주소를 MAC주소로 변환하는 프로토콜</p></li><li><p>RARP(Reverse ARP) : 반대로 MAC주소로 IP주소를 찾는 프로토콜</p></li><li><p>ICMP(Internet Control Message Protocol) : 상태 진단 메시지 프로토콜. 이 프로토콜을 이용하는 대표적인 프로그램이 ping</p></li><li><p>IGMP(Internet Group Message Protocol) : 멀티캐스트용 프로토콜</p></li></ul><br><h3 id="3-전송-계층-Transport-Layer"><a href="#3-전송-계층-Transport-Layer" class="headerlink" title="3. 전송 계층 (Transport Layer)"></a>3. 전송 계층 (Transport Layer)</h3><p>OSI7 계층의 전송계층과 같습니다. 프로세스간의 신뢰성 있는 데이터 전송을 담당하는 계층입니다.<br>process-to-process 전송을 담당하기 위해서는 논리적 주소가 필요한데 process가 사용하는 포트 번호를 그 논리적 주소로 사용합니다.<br>전송 계층에서 동작하는 프로토콜은 아래와 같습니다.</p><ul><li><p>TCP (Transmission Control Protocol) : 신뢰성있는 연결지향형 프로토콜. 신뢰성있다는 말은 그 페킷에 대한 오류처리나 재전송따위로 에러를 복구하는 것을 말합니다. 그때문에 TCP의 헤더에 붙는 정보가 많습니다.</p></li><li><p>UDP (User Datagram Protocol) : 비신뢰성 비연결형 프로토콜입니다. 페킷을 잃거나 오류가 있어도 대처하지 않는 것을 말합니다. 따라서 UDP헤더는 간단한 구조를 갖고 있습니다.</p></li></ul><br><h3 id="4-응용-계층-Application-Layer"><a href="#4-응용-계층-Application-Layer" class="headerlink" title="4. 응용 계층 (Application Layer)"></a>4. 응용 계층 (Application Layer)</h3><p>사용자와 가장 가까운 계층입니다. OSI7계층의 5계층부터 7계층까지의 기능을 담당하고 있습니다.<br>서버나 클라이언트 응용 프로그램이 이 계층에서 동작합니다. 우리가 알고 있는 브라우저나 텔넷같은 서비스가 이 계층에 동작하며, 동작하기 위해서는 전송계층의 주소, 즉 포트번호를 사용합니다. 예를들어 http가 88번 포트를 사용하는 것과 같습니다.<br>응용 계층에서 동작한느 프로토콜은 아래와 같습니다.</p><ul><li><p>HTTP (Hyper-Text Transfer Protocol) : TCP기반의 프로토콜로 포트번호 80번을 사용</p></li><li><p>Telnet : TCP 포트번호 23번을 사용합니다. 원격 터미널을 접속할때 이 포로토콜을 사용</p></li><li><p>SSH (Secure Shell) : 텔넷과 같은 서비스는 보안에 취약. 비밀번호가 암호화되지 않아 그대로 노출됩니다.. 이것을 보완한것이 SSH입니다. 포트번호 22번을 사용합니다. SFTP 같은 프로토콜도 22번 포트로 주요 사용합니다.</p></li><li><p>FTP(File Transfer Protocol) : 파일 전송 프로토콜. 파일을 받거나 올릴때 FTP를 사용. FTP는 파일을 올리거나 내려받을때 신뢰성을 중요시하기 때문에 TCP에서 동작합니다. 2개의 포트를 사용합니다.</p></li></ul><p>TCP 포트 20번은 데이터 전송을 위한 용도, TCP 포트 21번은 제어용으로 사용합니다.</p><ul><li><p>SMTP (Simple Mail Transfer Protocol) : 메일 전송 프로토콜입니다. TCP 상에서 동작하며 포트는 25번을 사용합니다.</p></li><li><p>POP3 (Post Office Protocol Version3) : 메일 수신용 프로토콜입니다. 아웃룩같은 프로그램이 POP3라는 프로토콜을 사용하여 동작합니다. TCP 포트 110번을 사용합니다.</p></li><li><p>DNS (Domain Name System) : 도메인명에 대한 호스트 정보를 제공해줍니다. 기본적으로 UDP상에서 동작합니다. 기본적으로 실패하면 다시 한번 요청하면 되며 그렇게 중요한 정보가 아니기 때문이죠. 하지만 신뢰성을 요할 경우에는 TCP상에서도 동작합니다. 데이터의 길이가 길 경우같은 때 TCP 기반으로 동작할 수 있습니다.</p></li></ul><p>UDP, TCP 포트 53번을 사용합니다.</p><p>이와 같이 포트번호가 특정 프로토콜이 사용해서 우리가 쓸 수 없는 포트들이 있습니다. 이런 포트들을 well-known port라고 합니다.</p><blockquote><footer><strong>참고 :</strong><cite><a href="https://reakwon.tistory.com/68">reakwon.tistory.com/68</a></cite></footer></blockquote>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/">한국어</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/">학습</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/%EA%B8%B0%EC%88%A0%EC%9A%A9%EC%96%B4/">기술용어</category>
      
      
      <category domain="https://bny9164.github.io/tags/TCP/">TCP</category>
      
      <category domain="https://bny9164.github.io/tags/IP/">IP</category>
      
      <category domain="https://bny9164.github.io/tags/TCP-IP/">TCP?IP</category>
      
      <category domain="https://bny9164.github.io/tags/TCP-%EA%B0%9C%EB%85%90/">TCP 개념</category>
      
      <category domain="https://bny9164.github.io/tags/TCP-%EB%9C%BB/">TCP 뜻</category>
      
      <category domain="https://bny9164.github.io/tags/IP-%EA%B0%9C%EB%85%90/">IP 개념</category>
      
      <category domain="https://bny9164.github.io/tags/IP-%EB%9C%BB/">IP 뜻</category>
      
      
      <comments>https://bny9164.github.io/2020/12/01/2021-10-18-ko-TCPIP/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RTSPとは?</title>
      <link>https://bny9164.github.io/2020/11/20/2021-10-16-jp-RTSP/</link>
      <guid>https://bny9164.github.io/2020/11/20/2021-10-16-jp-RTSP/</guid>
      <pubDate>Fri, 20 Nov 2020 00:11:13 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;RTSP(real time streaming protocol)&lt;/code&gt; はリアルタイムマルチメディアストリームを制御するためのプロトコルである。&lt;br&gt;RealNetwork 社、Netscape 社、IBM 社などが共同開発を行った。&lt;/p&gt;
&lt;h</description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>RTSP(real time streaming protocol)</code> はリアルタイムマルチメディアストリームを制御するためのプロトコルである。<br>RealNetwork 社、Netscape 社、IBM 社などが共同開発を行った。</p><h2 id="RTSP-の特徴"><a href="#RTSP-の特徴" class="headerlink" title="RTSP の特徴"></a>RTSP の特徴</h2><ul><li><p>多地点ストリーミング応用のための基盤構造</p><ul><li>応用階層でユニキャストまたはマルチキャスト接続の両方を使用する多地点応用で、マルチメディアストリーム制御のためのプロトコル提供という目的を持つが、プロトコルというより基盤構造と見ることができる。</li></ul></li></ul><br><ul><li><p>クライアント/サーバーの形で動作</p><ul><li>構造、文法、動作方式が HTTP と非常に似ている。</li></ul></li></ul><br><ul><li><p>セッション管理</p><ul><li>多地点多数のマルチメディアセッションの設定と制御が RTSP によって制御される。</li><li>RTSP のリソース管理セットアップ及び予約は RSVP で使用可能</li></ul></li></ul><br><ul><li><p>複数のプロトコルが関連する</p><ul><li><p>実際のマルチメディア情報のリアルタイム転送メカニズムは、RTP/RTCP に基本基本としている。</p><ul><li>RTP/RTCP:オーディオ、ビデオなどで時間同期化されたストリームを生成·制御する。</li></ul></li><li><p>信頼性のない TCP、非信頼的な UDP など、様々な伝送プロトコルの上で動作可能。主に UDP 上で動作</p><ul><li>このようなプロトコルの助けを受けて RTSP/RTP(RTCP)リアルタイムパケットが配信される。</li></ul></li><li><p>RTP、RTCP とは異なるチャンネルを使用（データ転送ポートとは異なるポート番号として 554 番を使用）</p><ul><li>RTP、RTCP は同一チャンネルを通じて転送されますが、</li><li>RSTP は、RTPRTCP とは異なるチャネルを使用して全体ストリーミング制御を行う。</li></ul></li></ul><br></li></ul><h2 id="ストリーミング再生に関する制御コマンド"><a href="#ストリーミング再生に関する制御コマンド" class="headerlink" title="ストリーミング再生に関する制御コマンド"></a>ストリーミング再生に関する制御コマンド</h2><p>ㅇ Setup(接続設定)、Play(再生)、Forward、Rewind、Pause(一時停止)、Stop(完全停止)、Resume(再起動)、Record、Teardown(接続解除)など、 - 家庭用 VCR をインターネットに適用したもの</p><p>インターネットウェブによる実装例<br><img src="/images/post/2021-10-15/RTSP.jpg" alt="RTSP"></p><blockquote><footer><strong>차재복 (Cha Jae Bok)</strong><cite><a href="http://www.ktword.co.kr/abbr_view.php?m_temp1=1798">www.ktword.co.kr/abbr_view.php?m_temp1=1798</a></cite></footer></blockquote>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/">日本語</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/">学習</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/%E6%8A%80%E8%A1%93%E7%94%A8%E8%AA%9E/">技術用語</category>
      
      
      <category domain="https://bny9164.github.io/tags/RTSP/">RTSP</category>
      
      <category domain="https://bny9164.github.io/tags/realtime/">realtime</category>
      
      <category domain="https://bny9164.github.io/tags/streaming/">streaming</category>
      
      <category domain="https://bny9164.github.io/tags/protocol-%E6%A6%82%E5%BF%B5/">protocol 概念</category>
      
      
      <comments>https://bny9164.github.io/2020/11/20/2021-10-16-jp-RTSP/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo 검색엔진 최적화</title>
      <link>https://bny9164.github.io/2020/11/18/2021-10-15-ko-SEO/</link>
      <guid>https://bny9164.github.io/2020/11/18/2021-10-15-ko-SEO/</guid>
      <pubDate>Wed, 18 Nov 2020 06:49:53 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/images/post/2021-10-15/SEO.png&quot; alt=&quot;SEO&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;내 블로그가 다양한 검색사이트에거 검색이 되게 하려면??&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;블로그를 생성한 후에 자신의 블로그가 검</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/post/2021-10-15/SEO.png" alt="SEO"></p><p><em>내 블로그가 다양한 검색사이트에거 검색이 되게 하려면??</em></p><br><p>블로그를 생성한 후에 자신의 블로그가 검색엔진에 노출되게 하려면 최적화 작업을 진행해줘야 합니다.</p><h3 id="검색엔진-최적화-SEO-에-필요한-플러그인-설치"><a href="#검색엔진-최적화-SEO-에-필요한-플러그인-설치" class="headerlink" title="검색엔진 최적화(SEO)에 필요한 플러그인 설치"></a><strong>검색엔진 최적화(SEO)에 필요한 플러그인 설치</strong></h3><ul><li>hexo-auto-canonical</li><li>hexo-generator-robotstxt</li><li>hexo-autonofollow</li><li>hexo-generator-feed</li><li>hexo-generator-seo-friendly-sitemap</li></ul><br><h4 id="1-hexo-auto-canonical"><a href="#1-hexo-auto-canonical" class="headerlink" title="1. hexo-auto-canonical"></a>1. <code>hexo-auto-canonical</code></h4><p><strong>대표 URL(표준 링크)을 자동으로 생성해주는 플러그인입니다.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-auto-canonical</span><br></pre></td></tr></table></figure><br><p>위와 같이 <code>git</code>을 통하여 모듈을 설치합니다.<br>설치 후 블로그의 경로(메인 디렉토리 기준)에서 <code>themes &gt; hueman &gt; layout &gt; common &gt; head.ejs</code> 파일 내에 <code>&lt;%- meta(page) %&gt;</code> 아래에 아래의 코드를 넣어줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//.ejs</span><br><span class="line">&lt;%- autoCanonical(config, page) %&gt;</span><br><span class="line"></span><br><span class="line">//.jade</span><br><span class="line">| !&#123; autoCanonical(config, page) &#125;</span><br></pre></td></tr></table></figure><br>삽입하게 되면 아래와 같은 코드가 됩니다.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- meta(page) %&gt;</span><br><span class="line">&lt;%- autoCanonical(config, page) %&gt;</span><br></pre></td></tr></table></figure><br><br><h4 id="2-hexo-generator-robotstxt"><a href="#2-hexo-generator-robotstxt" class="headerlink" title="2. hexo-generator-robotstxt"></a>2. <code>hexo-generator-robotstxt</code></h4><p><strong>자동으로 robot.txt 파일을 생성해주는 플러그인 입니다.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-robotstxt --save</span><br></pre></td></tr></table></figure><br><p>위와 같이 <code>git</code>을 통하여 모듈을 설치합니다.<br>설치 후 블로그 디렉토리의 <code>_config.yml(테마 _config.yml 아닙니다.)</code> 파일을 열어 아래와 같이 입력해줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">robotstxt:</span><br><span class="line">  useragent: &quot;*&quot;</span><br><span class="line">  allow:</span><br><span class="line">    - /</span><br><span class="line">  sitemap: https://username.github.io/sitemap.xml</span><br></pre></td></tr></table></figure><br><br><h4 id="3-hexo-autonofollow"><a href="#3-hexo-autonofollow" class="headerlink" title="3. hexo-autonofollow"></a>3. <code>hexo-autonofollow</code></h4><p><strong>외부 링크에 <code>rel=&quot;external nofollow&quot;</code>속성을 자동으로 추가해주는 기능을 하는 플러그인입니다.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-autonofollow --save</span><br></pre></td></tr></table></figure><br><p>위와 같이 <code>git</code>을 통하여 모듈을 설치합니다.<br>설치 후 블로그 디렉토리의 <code>_config.yml(테마 _config.yml 아닙니다.)</code> 파일을 열어 아래와 같이 입력해줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">    enable: true //플러그인 활성화 여부</span><br><span class="line">    exclude: //제외시킬 host</span><br><span class="line">    - guest1.com</span><br><span class="line">    - guest2.com</span><br></pre></td></tr></table></figure><br><br><h6 id="4-hexo-generator-feed"><a href="#4-hexo-generator-feed" class="headerlink" title="4. hexo-generator-feed"></a>4. <code>hexo-generator-feed</code></h6><p><strong>자동으로 <code>RSS feed</code>를 생성해주는 플러그인 입니다.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><br><p>위와 같이 <code>git</code>을 통하여 모듈을 설치합니다.<br>설치 후 블로그 디렉토리의 <code>_config.yml(테마 _config.yml 아닙니다.)</code> 파일을 열어 아래와 같이 입력해줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: rss2 //feed의 종류(atom/rss2) *네이버는 atom를 지원하지 않기 때문에 rss2 추천</span><br><span class="line">  path: rss2.xml //feed가 생성될 경로</span><br><span class="line">  limit: 20 //최신 포스트 갯수 설정(0 또는 false는 전체 포스트)</span><br></pre></td></tr></table></figure><br><h6 id="5-hexo-generator-seo-friendly-sitemap"><a href="#5-hexo-generator-seo-friendly-sitemap" class="headerlink" title="5. hexo-generator-seo-friendly-sitemap"></a>5. <code>hexo-generator-seo-friendly-sitemap</code></h6><p><strong>크롤러가 블로그를 더욱 효율적으로 크롤링 할 수 있도록 사이트맵 xml 파일을 자동으로 생성해 줍니다.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure><br><p>위와 같이 <code>git</code>을 통하여 모듈을 설치합니다.<br>설치 후 블로그 디렉토리의 <code>_config.yml(테마 _config.yml 아닙니다.)</code> 파일을 열어 아래와 같이 입력해줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml //sitemap이 생성될 경로</span><br><span class="line">  tag: false //sitemap에 tag 포함 여부</span><br><span class="line">  category: false //sitemap에 category 포함 여부</span><br></pre></td></tr></table></figure><br>모두 추가하게 되면 _config.yml는 아래와 같이 작성되게 됩니다.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: https://username.github.io</span><br><span class="line">//url : https://github.com/username/username.github.io</span><br><span class="line">=&gt; 이렇게(블로그 주소가 아니라 repository 주소) 입력하게 되면 rss2.xml에서 파일 경로를 제대로 읽어오지 못하기 때문에 주의!</span><br><span class="line">...</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/username/username.github.io # 깃허브 페이지가 저장된 리포지토리 주소</span><br><span class="line">  branch: main</span><br><span class="line">nofollow:</span><br><span class="line">  enable: true</span><br><span class="line">feed:</span><br><span class="line">  type: rss2</span><br><span class="line">  path: rss2.xml</span><br><span class="line">  limit: 20</span><br><span class="line">#sitemap auto generator</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  tag: false</span><br><span class="line">  category: false</span><br><span class="line">robotstxt:</span><br><span class="line">  useragent: &quot;*&quot;</span><br><span class="line">  allow:</span><br><span class="line">    - /</span><br><span class="line">  sitemap: https://username.github.io/sitemap.xml</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/">한국어</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/">학습</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      
      <category domain="https://bny9164.github.io/tags/seo/">seo</category>
      
      <category domain="https://bny9164.github.io/tags/SEO/">SEO</category>
      
      <category domain="https://bny9164.github.io/tags/hexo/">hexo</category>
      
      <category domain="https://bny9164.github.io/tags/%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EC%B5%9C%EC%A0%81%ED%99%94/">검색엔진최적화</category>
      
      <category domain="https://bny9164.github.io/tags/hexo-%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84-%EC%B5%9C%EC%A0%81%ED%99%94/">hexo 검색엔진 최적화</category>
      
      
      <comments>https://bny9164.github.io/2020/11/18/2021-10-15-ko-SEO/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo 検索エンジン最適化</title>
      <link>https://bny9164.github.io/2020/11/18/2021-10-17-jp-SEO/</link>
      <guid>https://bny9164.github.io/2020/11/18/2021-10-17-jp-SEO/</guid>
      <pubDate>Wed, 18 Nov 2020 06:49:53 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/images/post/2021-10-15/SEO.png&quot; alt=&quot;SEO&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;私のブログが色んな検索サイトから検索できるようにするためには？&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;ブログを作成した後、自分のブログが検索エンジ</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/post/2021-10-15/SEO.png" alt="SEO"></p><p><em>私のブログが色んな検索サイトから検索できるようにするためには？</em></p><br><p>ブログを作成した後、自分のブログが検索エンジンに露出されるようにするためには最適化作業を行わなければなりません。</p><h3 id="検索エンジン最適化-SEO-に必要なプラグインインストール"><a href="#検索エンジン最適化-SEO-に必要なプラグインインストール" class="headerlink" title="検索エンジン最適化(SEO)に必要なプラグインインストール"></a><strong>検索エンジン最適化(SEO)に必要なプラグインインストール</strong></h3><ul><li>hexo-auto-canonical</li><li>hexo-generator-robotstxt</li><li>hexo-autonofollow</li><li>hexo-generator-feed</li><li>hexo-generator-seo-friendly-sitemap</li></ul><br><h4 id="1-hexo-auto-canonical"><a href="#1-hexo-auto-canonical" class="headerlink" title="1. hexo-auto-canonical"></a>1. <code>hexo-auto-canonical</code></h4><p><strong>代表 URL(標準リンク)を自動的に生成してくれるプラグインです。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-auto-canonical</span><br></pre></td></tr></table></figure><br><p>上記のように git でモジュールをインストールします。<br>インストール後、ブログの経路（メインディレクトリ基準）で<code>themes &gt; hueman &gt; layout &gt; common &gt; head.ejs</code>ファイル内に<code>&lt;%- meta(page) %</code>の下に以下のコードを入れます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//.ejs</span><br><span class="line">&lt;%- autoCanonical(config, page) %&gt;</span><br><span class="line"></span><br><span class="line">//.jade</span><br><span class="line">| !&#123; autoCanonical(config, page) &#125;</span><br></pre></td></tr></table></figure><br>入れると以下のコードになります。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- meta(page) %&gt;</span><br><span class="line">&lt;%- autoCanonical(config, page) %&gt;</span><br></pre></td></tr></table></figure><br><br><h4 id="2-hexo-generator-robotstxt"><a href="#2-hexo-generator-robotstxt" class="headerlink" title="2. hexo-generator-robotstxt"></a>2. <code>hexo-generator-robotstxt</code></h4><p><strong>自動で robot.txt ファイルを生成してくれるプラグインです。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-robotstxt --save</span><br></pre></td></tr></table></figure><br><p>上記のように<code>git</code>でモジュールをインストールします。<br>インストール後のブログディレクトリの_<code>config.yml（テーマ_config.ymlではありません）</code>ファイルを開いて下記のように入力してください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">robotstxt:</span><br><span class="line">  useragent: &quot;*&quot;</span><br><span class="line">  allow:</span><br><span class="line">    - /</span><br><span class="line">  sitemap: https://username.github.io/sitemap.xml</span><br></pre></td></tr></table></figure><br><br><h4 id="3-hexo-autonofollow"><a href="#3-hexo-autonofollow" class="headerlink" title="3. hexo-autonofollow"></a>3. <code>hexo-autonofollow</code></h4><p><strong>外部リンクに<code>rel=&quot;external nofollow&quot;</code>プロパティを自動的に追加してくれる機能をするプラグインです。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-autonofollow --save</span><br></pre></td></tr></table></figure><br><p>上記のように<code>git</code>でモジュールをインストールします。<br>インストール後のブログディレクトリの<code>_config.yml（テーマ_config.ymlではありません）</code>ファイルを開いて下記のように入力してください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">     enable:true //プラグイン活性化可否</span><br><span class="line">    exclude: //除外させるhost</span><br><span class="line">    - guest1.com</span><br><span class="line">    - guest2.com</span><br></pre></td></tr></table></figure><br><br><h6 id="4-hexo-generator-feed"><a href="#4-hexo-generator-feed" class="headerlink" title="4. hexo-generator-feed"></a>4. <code>hexo-generator-feed</code></h6><p><strong>自動的に <code>RSS feed</code>を生成してくれるプラグインです。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><br><p>上記のように<code>git</code>でモジュールをインストールします。<br>インストール後のブログディレクトリの<code>_config.yml（テーマ_config.ymlではありません）</code>ファイルを開いて下記のように入力してください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type:rss2 //feedの種類(atom/rss2) rss2おすすめします。</span><br><span class="line">    path:rss2.xml //feedが生成される経路</span><br><span class="line">    limit:20 //最新ポスト数設定（0またはfalseは全ポスト）</span><br></pre></td></tr></table></figure><br><h6 id="5-hexo-generator-seo-friendly-sitemap"><a href="#5-hexo-generator-seo-friendly-sitemap" class="headerlink" title="5. hexo-generator-seo-friendly-sitemap"></a>5. <code>hexo-generator-seo-friendly-sitemap</code></h6><p><strong>クローラがブログをより効率的にクロリングできるようにサイトマップ xml ファイルを自動で生成してくれます。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure><br><p>上記のように<code>git</code>でモジュールをインストールします。<br>インストール後のブログディレクトリの_config.yml<code>（テーマ_config.ymlではありません）</code>ファイルを開いて下記のように入力してください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path:sitemap.xml // sitemapが生成される経路</span><br><span class="line">    tag:false // sitemapにtagを含むかどうか</span><br><span class="line">    category:false // sitemapにcategoryが含まれているかどうか</span><br></pre></td></tr></table></figure><br>すべて追加すると、`_config.yml`は以下のように作成されるようになります。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"># URL</span><br><span class="line">##If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as&#x27;/child/&#x27;</span><br><span class="line">url:https://username.github.io</span><br><span class="line">/url:https://github.com/username/username.github.io</span><br><span class="line">このように入力するとrss2.xmlからファイル経路を正しく読み込めないので注意！</span><br><span class="line">...</span><br><span class="line"># Deployment</span><br><span class="line">＃＃Docs:https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">    type:git</span><br><span class="line">    repo:https://github.com/username/username.github.io # ギットハブページが保存されたリポジトリアドレス</span><br><span class="line">    branch:main</span><br><span class="line">nofollow:</span><br><span class="line">    enable:true</span><br><span class="line">feed:</span><br><span class="line">    type:rss2</span><br><span class="line">    path:rss2.xml</span><br><span class="line">    limit:20</span><br><span class="line">#sitemap auto generator</span><br><span class="line">    sitemap:</span><br><span class="line">    path:sitemap.xml</span><br><span class="line">    tag:false</span><br><span class="line">    category:false</span><br><span class="line">robotstxt:</span><br><span class="line">    useragent:&quot;*&quot;</span><br><span class="line">    allow:</span><br><span class="line">    - /</span><br><span class="line">    sitemap:https:/username.github.io/sitemap.xml</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/">日本語</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/">学習</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/%E3%83%96%E3%83%AD%E3%82%B0/">ブログ</category>
      
      
      <category domain="https://bny9164.github.io/tags/seo/">seo</category>
      
      <category domain="https://bny9164.github.io/tags/SEO/">SEO</category>
      
      <category domain="https://bny9164.github.io/tags/hexo/">hexo</category>
      
      <category domain="https://bny9164.github.io/tags/%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E6%9C%80%E9%81%A9%E5%8C%96/">検索エンジン最適化</category>
      
      <category domain="https://bny9164.github.io/tags/hexo%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E6%9C%80%E9%81%A9%E5%8C%96/">hexo検索エンジン最適化</category>
      
      
      <comments>https://bny9164.github.io/2020/11/18/2021-10-17-jp-SEO/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RTSP란?</title>
      <link>https://bny9164.github.io/2020/11/17/2021-10-15-ko-RTSP/</link>
      <guid>https://bny9164.github.io/2020/11/17/2021-10-15-ko-RTSP/</guid>
      <pubDate>Tue, 17 Nov 2020 07:28:29 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;RTSP(real time streaming protocol)&lt;/code&gt; 는 실시간 멀티미디어 스트림을 제어하기 위한 프로토콜이다.&lt;br&gt;RealNetwork사, Netscape사, IBM사 등이 공동개발을 하였다.&lt;/p&gt;
&lt;h2 i</description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>RTSP(real time streaming protocol)</code> 는 실시간 멀티미디어 스트림을 제어하기 위한 프로토콜이다.<br>RealNetwork사, Netscape사, IBM사 등이 공동개발을 하였다.</p><h2 id="RTSP의-특징"><a href="#RTSP의-특징" class="headerlink" title="RTSP의 특징"></a>RTSP의 특징</h2><ul><li><p>다지점 스트리밍 응용을 위한 기반구조</p><ul><li>응용계층에서 유니캐스트 또는 멀티캐스트 연결 모두를 사용하는 다지점 응용에서, 멀티미디어 스트림 제어를 위한 프로토콜 제공이라는 목적을 가지나, 프로토콜이라기 보다는 기반구조라고 볼 수 있음</li></ul></li></ul><br><ul><li><p>클라이언트/서버 형태로 동작</p><ul><li>구조,문법,동작방식이 HTTP 와 매우 유사</li></ul><br></li><li><p>세션 관리</p><ul><li>다지점 다수개의 멀티미디어 세션의 설정과 제어가 RTSP에 의하여 제어됨</li><li>RTSP의 자원 관리 셋업 및 예약은 RSVP를 가지고 사용 가능</li></ul><br></li><li><p>여러 프로토콜들이 관련됨</p><ul><li><p>실제 멀티미디어 정보의 실시간 전송 매커니즘은 RTP/RTCP에 기본을 두고 있음</p><ul><li>RTP/RTCP : 오디오,비디오 등에서 시간 동기화된 스트림을 생성 및 제어함</li></ul></li><li><p>신뢰적인 TCP, 비신뢰적인 UDP 등 다양한 전송 프로토콜 위에서 동작 가능<br>주로 UDP 위에서 동작</p><ul><li>이러한 프로토콜의 도움을 받아 RTSP/RTP(RTCP) 실시간 패킷이 전달됨</li></ul></li><li><p>RTP,RTCP와는 다른 채널 사용 (데이터 전송 포트와 다른 포트번호로써 554번 사용)</p><ul><li>RTP,RTCP는 동일 채널을 통해 전송된다.</li><li>RSTP는 RTP/RTCP와 다른 채널을 사용하여 전체 스트리밍 제어를 수행함</li></ul></li></ul></li></ul><br><h2 id="스트리밍-재생과-관련된-제어-명령어"><a href="#스트리밍-재생과-관련된-제어-명령어" class="headerlink" title="스트리밍 재생과 관련된 제어 명령어"></a>스트리밍 재생과 관련된 제어 명령어</h2><p>ㅇ Setup(연결설정), Play(재생), Forward, Rewind, Pause(일시멈춤), Stop(완전정지), Resume(다시시작), Record, Teardown(연결해제) 등 - 가정용 VCR을 인터넷에 적용한 것임</p><p>ㅇ 인터넷 웹에 의한 구현 例<br><img src="/images/post/2021-10-15/RTSP.jpg" alt="RTSP"></p><blockquote><footer><strong>차재복 (Cha Jae Bok)</strong><cite><a href="http://www.ktword.co.kr/abbr_view.php?m_temp1=1798">www.ktword.co.kr/abbr_view.php?m_temp1=1798</a></cite></footer></blockquote>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/">한국어</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/">학습</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/%EA%B8%B0%EC%88%A0%EC%9A%A9%EC%96%B4/">기술용어</category>
      
      
      <category domain="https://bny9164.github.io/tags/RTSP/">RTSP</category>
      
      <category domain="https://bny9164.github.io/tags/realtime/">realtime</category>
      
      <category domain="https://bny9164.github.io/tags/streaming/">streaming</category>
      
      <category domain="https://bny9164.github.io/tags/protocol-%EA%B0%9C%EB%85%90/">protocol 개념</category>
      
      
      <comments>https://bny9164.github.io/2020/11/17/2021-10-15-ko-RTSP/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ONVIF란?</title>
      <link>https://bny9164.github.io/2020/11/15/2021-10-15-ko-ONVIF/</link>
      <guid>https://bny9164.github.io/2020/11/15/2021-10-15-ko-ONVIF/</guid>
      <pubDate>Sun, 15 Nov 2020 06:44:51 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;ONVIF(Open Network Video Interface Forum 오픈 네트워크 비디오 인터페이스 포럼[*], 온비프)는 세계 개방형 산업 포럼의 하나로서, 보안 목적의 물리적인 IP 기반 제품들의 인터페이스를 위한 세계 개방형 표준의 개</description>
        
      
      
      
      <content:encoded><![CDATA[<p>ONVIF(Open Network Video Interface Forum 오픈 네트워크 비디오 인터페이스 포럼[*], 온비프)는 세계 개방형 산업 포럼의 하나로서, 보안 목적의 물리적인 IP 기반 제품들의 인터페이스를 위한 세계 개방형 표준의 개발 및 이용을 용이하게 하는 것을 목적으로 한다. ONVIF는 동영상 감시 및 기타 물리적인 방범 지역 내의 IP 제품들이 어떻게 서로 통신할 수 있는지에 대한 표준을 만든다. ONVIF는 2008년 액시스 커뮤니케이션스, 보쉬 시큐리티 시스템스, 소니가 시작한 단체이다.<br>간단히 말해 카메라를 제어할 때 사용되는 <code>국제 표준 프로토콜</code>이고 자세히 말하면 보안장비(CCTV, 카메라, 뷰어 등)에서 사용되는 표준 프로토콜이다.</p><h2 id="프로파일"><a href="#프로파일" class="headerlink" title="프로파일"></a>프로파일</h2><ul><li><p>프로파일 S<br>비디오 및 오디오 스트리밍, PTZ 옵션, 릴레이 액티베이션 등의 IP 비디오 시스템의 공통 기능을 언급한다.</p></li><li><p>프로파일 C<br>도어 상태 및 제어, 자격 관리, 이벤트 관리 등의 IP 접근 통제 시스템의 공통 기능을 설명한다.</p></li><li><p>프로파일 G<br>비디오 스토리지, 녹화, 검색을 설명한다.</p></li><li><p>프로파일 Q<br>장치 발견, 구성, TLS 인증의 관리에 대해 설명한다.</p></li><li><p>프로파일 A<br>정보, 상태, 이벤트의 검색을 수행하고, 접근 규칙, 자격 정보, 스케줄 등의 PACS(물리 접근 제어 시스템) 관련 항목들을 구성하는 기능이다.</p></li><li><p>프로파일 T<br>(출시 후보/RC) H.264, H.265 인코딩 포맷, 이미징 설정, 알람 이벤트(모션, 부당 변경 감지 등) 등의 비디오 스트리밍 기능을 지원한다.</p></li></ul><br><h2 id="용도"><a href="#용도" class="headerlink" title="용도"></a>용도</h2><br><p>보안장비끼리 서로 연결되어 동작하게 해주는 프로토콜이다.<br><img src="/images/post/2021-10-15/ONVIF.png" alt="ONVIF"></p><p>일반적으로 보안장비, 영상장비들은 다양한 프로토콜을 지원하고 있는데 자사 표준 프로토콜과 <code>국제 표준 프로토콜(ONVIF)</code>을 사용한다.<br><code>국제 표준 프로토콜(ONVIF)</code>의 경우 해당 장비에만 특화되어 있는 기능을 지원하지 않기 때문에 자사 표준 프로토콜을 사용하는 경우도 있다.<br>ONVIF를 사용할 경우 전세계 공통적으로 사용하는 프로토콜이기 때문에 새로운 사양이나 변경되는 작업이 어렵고 오래 걸린다. 하지만 세계 표준이기 때문에 세계 어디서든 사용할 수 있다.</p><p>일반적으로 프로토콜은 socket 통신 기반 프로토콜과 HTTP기반 프로토콜이 있는데 ONVIF는 HTTP 프로토콜을 사용한다.</p><table><thead><tr><th align="center">기능</th><th align="center">프로토콜의 종류</th></tr></thead><tbody><tr><td align="center">영상, 음성, 이벤트 송수신</td><td align="center">RTP/RTSP 프로토콜</td></tr><tr><td align="center">제어, 설정, 조회</td><td align="center">WSDL, SOAP 프로토콜</td></tr></tbody></table><br><p>영상을 볼 때는 RTP/RTSP를 사용하고, IP를 변경하거나 설정을 변경하거나 할 때에는 WSDL, SOAP를 사용한다<br>ONVIF 프로토콜이 RTP/RTSP 프로토콜을 구현한게 아니라 카메라와 같은 장비를 사용할 수 있도록 RTP/RTSP 주소를 알려주는 역할을 한다.</p>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/">한국어</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/">학습</category>
      
      <category domain="https://bny9164.github.io/categories/%ED%95%9C%EA%B5%AD%EC%96%B4/%ED%95%99%EC%8A%B5/%EA%B8%B0%EC%88%A0%EC%9A%A9%EC%96%B4/">기술용어</category>
      
      
      <category domain="https://bny9164.github.io/tags/ONVIF/">ONVIF</category>
      
      <category domain="https://bny9164.github.io/tags/RTP/">RTP</category>
      
      <category domain="https://bny9164.github.io/tags/RTSP/">RTSP</category>
      
      <category domain="https://bny9164.github.io/tags/ONVIF-%EA%B0%9C%EB%85%90/">ONVIF 개념</category>
      
      <category domain="https://bny9164.github.io/tags/ONVIF-%EB%9C%BB/">ONVIF 뜻</category>
      
      
      <comments>https://bny9164.github.io/2020/11/15/2021-10-15-ko-ONVIF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ONVIFとは？</title>
      <link>https://bny9164.github.io/2020/11/15/2021-10-16-jp-ONVIF/</link>
      <guid>https://bny9164.github.io/2020/11/15/2021-10-16-jp-ONVIF/</guid>
      <pubDate>Sun, 15 Nov 2020 06:44:51 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;ONVIF（Open Network Video Interface Forum オープンネットワークビデオインターフェースフォーラム[*]、オンビーフ）は、世界開放型産業フォーラムの一つであり、セキュリティ目的の物理的な IP ベース製品のインターフェースのための世界開放</description>
        
      
      
      
      <content:encoded><![CDATA[<p>ONVIF（Open Network Video Interface Forum オープンネットワークビデオインターフェースフォーラム[*]、オンビーフ）は、世界開放型産業フォーラムの一つであり、セキュリティ目的の物理的な IP ベース製品のインターフェースのための世界開放型標準の開発及び利用を容易にすることを目的とする。 ONVIF は動画監視その他の物理的な防犯地域内の IP 製品がどのように相互に通信できるかについての標準を作る。 ONVIF は 2008 年アクシスコミュニケーションズ、ボッシュセキュリティシステムズ、ソニーが立ち上げた団体である。<br>簡単に言えばカメラを制御する際に使われる<code>国際標準プロトコル</code>であり、詳しく言えばセキュリティ機器（CCTV、カメラ、ビューアーなど）で使われる標準プロトコルである。</p><h2 id="プロファイル"><a href="#プロファイル" class="headerlink" title="プロファイル"></a>プロファイル</h2><ul><li><p>プロファイル S<br>ビデオやオーディオストリーミング、PTZ オプション、リレーアクティベーションなどの IP ビデオシステムの共通機能に言及する。</p></li><li><p>プロファイル C<br>ドアの状態及び制御、資格管理、イベント管理などの IP アクセス制御システムの共通機能を説明する。</p></li><li><p>プロファイル G<br>ビデオストレージ、録画、検索を説明する。</p></li><li><p>プロファイル Q<br>デバイス発見、構成、TLS 認証の管理について説明する。</p></li><li><p>プロファイル A<br>情報、状態、イベントの検索を行い、アクセス規則、資格情報、スケジュール等の PACS（物理アクセス制御システム）関連項目を構成する機能である。</p></li><li><p>プロファイル T<br>（発売候補 RC）H.264、H.265 エンコードフォーマット、イメージング設定、アラームイベント（モーション、不当変更検知など）などのビデオストリーミング機能をサポートする。</p></li></ul><br><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><br><p>セキュリティ装備同士を互いに接続して動作させるプロトコルである。</p><br><p><img src="/images/post/2021-10-15/ONVIF.png" alt="ONVIF"></p><p>一般的にセキュリティ装備、映像装備は様々なプロトコルをサポートしているが、自社標準プロトコルと<code>国際標準プロトコル(ONVIF)</code>を使用する。<br><code>国際標準プロトコル(ONVIF)</code>の場合、該当装置のみに特化している機能をサポートしないため、自社標準プロトコルを使用する場合もある。<br>ONVIF を使用する場合、全世界共通で使用するプロトコルであるため、新しい仕様や変更される作業は難しく時間がかかる。 しかし、世界標準であるため、世界のどこでも使うことができる。</p><p>一般的にプロトコルは socket 通信基盤プロトコルと HTTP ベースプロトコルがあるが、ONVIF は HTTP プロトコルを使用する。</p><table><thead><tr><th align="center">機能</th><th align="center">プロトコルの種類</th></tr></thead><tbody><tr><td align="center">映像、音声、イベント送受信</td><td align="center">RTPRTSP プロトコル</td></tr><tr><td align="center">制御、設定、照会</td><td align="center">WSDL、SOAP プロトコル</td></tr></tbody></table><br><p>映像を見るときは RTPRTSP を使用し、IP を変更したり、設定を変更したりするときには WSDL、SOAP を使用する<br>ONVIF プロトコルが RTPRTSP プロトコルを具現したのではなく、カメラのような装備を使用できるように RTPRTSP アドレスを知らせる役割をする。</p>]]></content:encoded>
      
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/">日本語</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/">学習</category>
      
      <category domain="https://bny9164.github.io/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%AD%A6%E7%BF%92/%E6%8A%80%E8%A1%93%E7%94%A8%E8%AA%9E/">技術用語</category>
      
      
      <category domain="https://bny9164.github.io/tags/ONVIF/">ONVIF</category>
      
      <category domain="https://bny9164.github.io/tags/RTP/">RTP</category>
      
      <category domain="https://bny9164.github.io/tags/RTSP/">RTSP</category>
      
      <category domain="https://bny9164.github.io/tags/ONVIF-%E6%A6%82%E5%BF%B5/">ONVIF 概念</category>
      
      <category domain="https://bny9164.github.io/tags/ONVIF-%E6%84%8F%E5%91%B3/">ONVIF 意味</category>
      
      
      <comments>https://bny9164.github.io/2020/11/15/2021-10-16-jp-ONVIF/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
